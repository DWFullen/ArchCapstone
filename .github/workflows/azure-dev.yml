# Run on pushes to dev or main, and on manual dispatch

on:
  push:
    branches:
      - dev
  workflow_dispatch:

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: write
  # The contents permission is set to write to allow the workflow to create pull requests

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: development
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      APPLICATION_NAME: ${{ vars.APPLICATION_NAME }}
      APPLICATION_VERSION: ${{ vars.APPLICATION_VERSION }}
      AZD_PIPELINE_PROVIDER: ${{ vars.AZD_PIPELINE_PROVIDER }}
      AZURE_CONTAINER_REGISTRY_ENDPOINT: ${{ vars.AZURE_CONTAINER_REGISTRY_ENDPOINT }}
      AZURE_DEV_ENVIRONMENT_NAME: ${{ vars.AZURE_DEV_ENVIRONMENT_NAME }}
      AZURE_UAT_ENVIRONMENT_NAME: ${{ vars.AZURE_UAT_ENVIRONMENT_NAME }}
      AZURE_PROD_ENVIRONMENT_NAME: ${{ vars.AZURE_PROD_ENVIRONMENT_NAME }}
      AZURE_PIPELINE_CLIENT_ID: ${{ vars.AZURE_PIPELINE_CLIENT_ID }}
      AZURE_RESOURCE_MY_BLAZOR_APP_ID: ${{ vars.AZURE_RESOURCE_MY_BLAZOR_APP_ID }}
      AZURE_SUBSCRIPTION: ${{ vars.AZURE_SUBSCRIPTION }}
      AZURE_Z_LOCATION: ${{ vars.AZURE_Z_LOCATION }}
      SERVICE_MY_BLAZOR_APP_IMAGE_NAME: ${{ vars.SERVICE_MY_BLAZOR_APP_IMAGE_NAME }}
      SERVICE_MY_BLAZOR_APP_RESOURCE_EXISTS: ${{ vars.SERVICE_MY_BLAZOR_APP_RESOURCE_EXISTS }}
      ENVIRONMENT_NAME: ${{ vars.AZURE_DEV_ENVIRONMENT_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install azd
        uses: Azure/setup-azd@v2
      - name: Log in with Azure (Federated Credentials)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh
      - name: Provision Infrastructure
        run: |
          echo "ENVIRONMENT_NAME=$ENVIRONMENT_NAME" >> $GITHUB_ENV
          azd provision --no-prompt
        env:
          AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ secrets.AZD_INITIAL_ENVIRONMENT_CONFIG }}
          ENVIRONMENT_NAME: ${{ vars.AZURE_DEV_ENVIRONMENT_NAME }}
          environmentName: ${{ vars.AZURE_DEV_ENVIRONMENT_NAME }}
      - name: Deploy Application
        run: azd deploy --environment development
        env:
          AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}

  deploy-prod:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: production
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      APPLICATION_NAME: ${{ vars.APPLICATION_NAME }}
      APPLICATION_VERSION: ${{ vars.APPLICATION_VERSION }}
      AZD_PIPELINE_PROVIDER: ${{ vars.AZD_PIPELINE_PROVIDER }}
      AZURE_CONTAINER_REGISTRY_ENDPOINT: ${{ vars.AZURE_CONTAINER_REGISTRY_ENDPOINT }}
      AZURE_DEV_ENVIRONMENT_NAME: ${{ vars.AZURE_DEV_ENVIRONMENT_NAME }}
      AZURE_UAT_ENVIRONMENT_NAME: ${{ vars.AZURE_UAT_ENVIRONMENT_NAME }}
      AZURE_PROD_ENVIRONMENT_NAME: ${{ vars.AZURE_PROD_ENVIRONMENT_NAME }}
      AZURE_PIPELINE_CLIENT_ID: ${{ vars.AZURE_PIPELINE_CLIENT_ID }}
      AZURE_RESOURCE_MY_BLAZOR_APP_ID: ${{ vars.AZURE_RESOURCE_MY_BLAZOR_APP_ID }}
      AZURE_SUBSCRIPTION: ${{ vars.AZURE_SUBSCRIPTION }}
      AZURE_Z_LOCATION: ${{ vars.AZURE_Z_LOCATION }}
      SERVICE_MY_BLAZOR_APP_IMAGE_NAME: ${{ vars.SERVICE_MY_BLAZOR_APP_IMAGE_NAME }}
      SERVICE_MY_BLAZOR_APP_RESOURCE_EXISTS: ${{ vars.SERVICE_MY_BLAZOR_APP_RESOURCE_EXISTS }}
      ENVIRONMENT_NAME: ${{ vars.AZURE_PROD_ENVIRONMENT_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create Pull Request to Main
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
          commit-message: "Merge changes from dev to main for production deployment"
          title: "Production Deployment"
          body: "This pull request merges changes from dev to main to trigger the production deployment pipeline."
      - name: Install azd
        uses: Azure/setup-azd@v2
      - name: Log in with Azure (Federated Credentials)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh
      - name: Provision Infrastructure
        run: azd provision --no-prompt
        env:
          AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ secrets.AZD_INITIAL_ENVIRONMENT_CONFIG }}
          ENVIRONMENT_NAME: ${{ vars.AZURE_PROD_ENVIRONMENT_NAME }}
          environmentName: ${{ vars.AZURE_PROD_ENVIRONMENT_NAME }}
      - name: Deploy Application
        run: azd deploy --environment production
        env:
          AZURE_RESOURCE_GROUP: ${{ env.AZURE_RESOURCE_GROUP }}
